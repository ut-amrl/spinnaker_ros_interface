PROJECT(spinnaker_ros_interface)
CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0)

MESSAGE(STATUS "Compilers found: ${CMAKE_CXX_COMPILER_LIST}")
MESSAGE(STATUS "Using compiler: ${CMAKE_CXX_COMPILER}")
MESSAGE(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
MESSAGE(STATUS "Build Mode: ${CMAKE_BUILD_MODE}")
MESSAGE(STATUS "Arch: ${CMAKE_SYSTEM_PROCESSOR}")

if(CMAKE_VERSION VERSION_LESS "3.7.0")
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
endif()

SET(CMAKE_CXX_FLAGS "-std=c++11 -march=native -g -Wno-ignored-qualifiers -Wno-extra")

IF(${CMAKE_BUILD_TYPE} MATCHES "Release")
  MESSAGE(STATUS "Additional Flags for Release mode")
  SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -fopenmp -O3 -DNDEBUG")
ELSEIF(${CMAKE_BUILD_TYPE} MATCHES "Debug")
  MESSAGE(STATUS "Additional Flags for Debug mode")
  SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -g")
  SET(BUILD_SPECIFIC_LIBRARIES "")
ENDIF()

MESSAGE(STATUS "CXX Flags: ${CMAKE_CXX_FLAGS}")
MESSAGE(STATUS "Build-Specific Libraries: ${BUILD_SPECIFIC_LIBRARIES}")

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/submodules" ${PROJECT_SOURCE_DIR}/cmake)

FIND_PACKAGE(SPINNAKER REQUIRED)
FIND_PACKAGE(roscpp REQUIRED)
FIND_PACKAGE(roslib REQUIRED)
FIND_PACKAGE(image_transport REQUIRED)

INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR})
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/src/config_reader/include)

INCLUDE_DIRECTORIES(${SPINNAKER_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${roscpp_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${roslib_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${image_transport_INCLUDE_DIRS})

ADD_SUBDIRECTORY(src/shared)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/src/shared)

SET(libs glog gflags amrl_shared_lib lua5.1
    ${BUILD_SPECIFIC_LIBRARIES} 
    ${SPINNAKER_LIBS}
    ${roscpp_LIBRARIES} 
    ${roslib_LIBRARIES}
    ${image_transport_LIBRARIES})

ADD_EXECUTABLE(spinnaker_ros_interface src/spinnaker_ros_interface_main.cc)
TARGET_LINK_LIBRARIES(spinnaker_ros_interface ${libs})

ADD_EXECUTABLE(ImageFormatControl src/ImageFormatControl.cpp)
TARGET_LINK_LIBRARIES(ImageFormatControl ${libs})

